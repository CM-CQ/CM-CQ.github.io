<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>葱苗的博客</title><link>https://CM-CQ.github.io</link><description>葱苗的博客备用地址</description><copyright>葱苗的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/47654229?v=4</url><title>avatar</title><link>https://CM-CQ.github.io</link></image><lastBuildDate>Mon, 24 Jun 2024 08:38:19 +0000</lastBuildDate><managingEditor>葱苗的博客</managingEditor><ttl>60</ttl><webMaster>葱苗的博客</webMaster><item><title>lambda表达式 和 stream流 - 函数式编程</title><link>https://CM-CQ.github.io/post/lambda-biao-da-shi-%20-he-%20stream-liu-%20-%20-han-shu-shi-bian-cheng.html</link><description>&#13;
# 函数式编程-Stream流&#13;
## 1、概述&#13;
### 1.1 为什么学？&#13;
- 看懂公司的代码&#13;
- 大数据量下处理集合效率高&#13;
- 代码可读性高&#13;
- 消灭嵌套地狱&#13;
&#13;
```&#13;
//查询未成年作家的评分在70以上的书籍 由于洋流影响所以作家和书籍可能出现重复，需要进行去重&#13;
List&lt;Book&gt; bookList = new ArrayList&lt;&gt;();&#13;
Set&lt;Book&gt; uniqueBookValues = new Hashset&lt;&gt;:&#13;
Set&lt;Author&gt; uniqueAuthorValues = new Hashset&lt;&gt;();&#13;
for (Author author :authors) {&#13;
    if (uniqueAuthorValues.add(author)){&#13;
        if(author.getAge()&lt; 18){&#13;
            List&lt;Book&gt; books = author.getBooks();&#13;
            for(Book book :books){&#13;
                if(book.getscore()&gt;70){&#13;
                    if (uniqueBookValues.add(book)){&#13;
                        bookList.add(book);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
System.out.println(bookList):&#13;
```&#13;
```&#13;
List&lt;Book&gt; collect = authors.stream()&#13;
    .distinct()&#13;
    .filter(author -&gt; author.getAge()&lt; 18)&#13;
    .map(author -&gt; author.getBooks())&#13;
    .flatMap(collection::stream)&#13;
    .filter(book -&gt; book.getscore()&gt;170)&#13;
    .distinct()&#13;
    .co1lect(co1lectors.toList());&#13;
System.out.println(collect);&#13;
```&#13;
## 1.2 函数式编程思想&#13;
### 1.2.1 概念&#13;
面向对象思想需要关注用什么对象完成什么事情。</description><guid isPermaLink="true">https://CM-CQ.github.io/post/lambda-biao-da-shi-%20-he-%20stream-liu-%20-%20-han-shu-shi-bian-cheng.html</guid><pubDate>Mon, 24 Jun 2024 08:37:51 +0000</pubDate></item><item><title>关于 - About</title><link>https://CM-CQ.github.io/post/guan-yu-%20-%20About.html</link><description>主网站地址崩溃时，该地址为备用地址&#13;
本人csdn主要用于平时代码遇到的问题和学习笔记的记录 也是我较为常用的地址&#13;
csdn地址：https://blog.csdn.net/chirp_CQ。</description><guid isPermaLink="true">https://CM-CQ.github.io/post/guan-yu-%20-%20About.html</guid><pubDate>Sat, 22 Jun 2024 15:01:22 +0000</pubDate></item><item><title>葱苗测试</title><link>https://CM-CQ.github.io/post/cong-miao-ce-shi.html</link><description>这是一葱苗的测试。</description><guid isPermaLink="true">https://CM-CQ.github.io/post/cong-miao-ce-shi.html</guid><pubDate>Sat, 22 Jun 2024 14:28:19 +0000</pubDate></item></channel></rss>